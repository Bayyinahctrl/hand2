[{"/Users/maria/GH/react-gestures/gesture-recognitions/src/index.js":"1","/Users/maria/GH/react-gestures/gesture-recognitions/src/reportWebVitals.js":"2","/Users/maria/GH/react-gestures/gesture-recognitions/src/App.js":"3","/Users/maria/GH/react-gestures/gesture-recognitions/src/utilities.js":"4","/Users/maria/GH/react-gestures/gesture-recognitions/src/LoveYouGesture.js":"5"},{"size":500,"mtime":1609782359485,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609782359486,"results":"8","hashOfConfig":"7"},{"size":3721,"mtime":1609796428291,"results":"9","hashOfConfig":"7"},{"size":2661,"mtime":1609793325742,"results":"10","hashOfConfig":"7"},{"size":877,"mtime":1609795577247,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1u02f9x",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maria/GH/react-gestures/gesture-recognitions/src/index.js",[],["24","25"],"/Users/maria/GH/react-gestures/gesture-recognitions/src/reportWebVitals.js",[],"/Users/maria/GH/react-gestures/gesture-recognitions/src/App.js",["26","27","28","29"],"import React, {useRef, useState} from 'react';\nimport * as tf from '@tensorflow/tfjs'\nimport * as handpose from '@tensorflow-models/handpose'\nimport './App.css';\nimport Webcam from 'react-webcam'\nimport { drawHand } from \"./utilities\";\nimport * as fp from \"fingerpose\";\nimport piece from \"./piece.png\";\nimport thumbs_up from \"./thumbs_up.png\";\nimport up from \"./up.png\";\nimport call from \"./call.png\";\nimport love from \"./love.png\";\n\nimport {loveYouGesture} from \"./LoveYouGesture\"; \n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const [emoji, setEmoji] = useState(null);\n  const images = { thumbs_up: thumbs_up, victory: piece, love: love};\n\n  const runHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"Handpose model loaded.\");\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n\n  const detect = async (net) => {\n    // Check if we are recieving a video at all\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n      console.log(hand);\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([\n          fp.Gestures.VictoryGesture,\n          fp.Gestures.ThumbsUpGesture,\n          loveYouGesture\n        ]);\n        const gesture = await GE.estimate(hand[0].landmarks, 4);\n        if (gesture.gestures !== undefined && gesture.gestures.length > 0) {\n          console.log(gesture.gestures)\n\n          const confidence = gesture.gestures.map(\n            (prediction) => prediction.confidence\n          );\n          const maxConfidence = confidence.indexOf(\n            Math.max.apply(null, confidence)\n          );\n        \n          setEmoji(gesture.gestures[maxConfidence].name);\n          console.log(emoji);\n        }\n      }\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  runHandpose()\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n      <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n        {emoji !== null ? (\n          <img\n            src={images[emoji]}\n            style={{\n              position: \"absolute\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 400,\n              bottom: 500,\n              right: 0,\n              textAlign: \"center\",\n              height: 100,\n            }}\n          />\n        ) : (\n          \"\"\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/maria/GH/react-gestures/gesture-recognitions/src/utilities.js",[],"/Users/maria/GH/react-gestures/gesture-recognitions/src/LoveYouGesture.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":13,"nodeType":"36","messageId":"37","endLine":2,"endColumn":15},{"ruleId":"34","severity":1,"message":"38","line":10,"column":8,"nodeType":"36","messageId":"37","endLine":10,"endColumn":10},{"ruleId":"34","severity":1,"message":"39","line":11,"column":8,"nodeType":"36","messageId":"37","endLine":11,"endColumn":12},{"ruleId":"40","severity":1,"message":"41","line":118,"column":11,"nodeType":"42","endLine":130,"endColumn":13},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","'up' is defined but never used.","'call' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]